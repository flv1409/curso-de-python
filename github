📁 Estrutura do Projeto
pgsql
Copiar
Editar
workout_api/
│
├── main.py
├── models.py
├── schemas.py
├── database.py
├── crud.py
├── requirements.txt
📄 requirements.txt
txt
Copiar
Editar
fastapi
uvicorn
sqlalchemy
pydantic
fastapi-pagination
📄 database.py
python
Copiar
Editar
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "sqlite:///./test.db"

engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)
Base = declarative_base()
📄 models.py
python
Copiar
Editar
from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from database import Base

class Atleta(Base):
    __tablename__ = "atletas"
    id = Column(Integer, primary_key=True, index=True)
    nome = Column(String, index=True)
    cpf = Column(String, unique=True, index=True)
    centro_treinamento = Column(String)
    categoria = Column(String)
📄 schemas.py
python
Copiar
Editar
from pydantic import BaseModel

class AtletaCreate(BaseModel):
    nome: str
    cpf: str
    centro_treinamento: str
    categoria: str

class AtletaResponse(BaseModel):
    nome: str
    centro_treinamento: str
    categoria: str

    class Config:
        orm_mode = True
📄 crud.py
python
Copiar
Editar
from sqlalchemy.orm import Session
from models import Atleta
from schemas import AtletaCreate
from sqlalchemy.exc import IntegrityError

def get_atletas(db: Session, nome: str = None, cpf: str = None):
    query = db.query(Atleta)
    if nome:
        query = query.filter(Atleta.nome.ilike(f"%{nome}%"))
    if cpf:
        query = query.filter(Atleta.cpf == cpf)
    return query.all()

def create_atleta(db: Session, atleta: AtletaCreate):
    novo = Atleta(**atleta.dict())
    db.add(novo)
    try:
        db.commit()
        db.refresh(novo)
        return novo
    except IntegrityError:
        db.rollback()
        raise
📄 main.py
python
Copiar
Editar
from fastapi import FastAPI, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from database import SessionLocal, engine
from models import Base
from schemas import AtletaCreate, AtletaResponse
import crud
from sqlalchemy.exc import IntegrityError
from fastapi_pagination import Page, paginate, add_pagination

app = FastAPI()
Base.metadata.create_all(bind=engine)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/atletas", response_model=Page[AtletaResponse])
def listar_atletas(nome: str = Query(None), cpf: str = Query(None), db: Session = Depends(get_db)):
    atletas = crud.get_atletas(db, nome, cpf)
    return paginate(atletas)

@app.post("/atletas", response_model=AtletaResponse)
def criar_atleta(atleta: AtletaCreate, db: Session = Depends(get_db)):
    try:
        return crud.create_atleta(db, atleta)
    except IntegrityError:
        raise HTTPException(
            status_code=303,
            detail=f"Já existe um atleta cadastrado com o cpf: {atleta.cpf}"
        )

add_pagination(app)
