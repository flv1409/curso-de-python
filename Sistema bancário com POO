from abc import ABC, abstractclassmethod, abstractproperty
from datetime import datetime

class cliente:

    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []

class pessoa_fisica(cliente):
    def __init__(self,nome,data_nascimento,CPF, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.CPF = CPF
  
class conta:
    def __init__(self, numero, cliente):
        self._saldo = 0
        self._numero = numero
        self._agencia = "0001"
        self._cliente = cliente
        self._historico = historico()

    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)
    
    @property
    def saldo(self):
        return self._saldo
    
    @property
    def numero(self):
        return self._numero
    
    @property
    def agencia(self):
        return self._agencia
    
    @property
    def cliente(self):
        return self._cliente
    
    @property
    def historico(self):
        return self._historico
    
    def sacar(self, valor):
        saldo = self.saldo
        excedeu_saldo = valor > saldo

        if excedeu_saldo:
            print("\n@@@ Operação Falhou! Você não tem saldo suficiente, @@@ ")
        
        elif valor > 0:
            self._saldo -= valor
            print("\n=== Saque realizado com sucesso!")
            return True
        
        else:
            print("\n@@@ Operação Falhou! O valor informado è invalido. @@@")
        return False
    
    def depositar(self,valor):
        if valor > 0:
            self._saldo += valor
            print("=== Deposito realizado com sucesso!")
        else:
            print("\n@@@ Operação Falhou! O valor informadoè invalido. @@@")
            return False
        
        return False

class conta_corrente(conta):
    

class historico:

class transacao(ABC):

class saque(transacao):

class deposito(transacao):
